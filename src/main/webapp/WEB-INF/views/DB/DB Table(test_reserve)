DB Table
------------test_reserve 테이블-------------------
create table test_reserve(seatNum number not null, reDate varchar2(10), nullChk varchar2(8),
p17 varchar2(8), P18 varchar2(8), P19 varchar2(8),P20 varchar2(8),
P21 varchar2(8), P22 varchar2(8));

==> 좌석번호, 날짜, nullChk(현재 좌석 사용 유무 체크 위한 속성), 17~22시

	=============test_studyroom 테이블 추가==================
	create table test_studyroom(seatNum number not null, reDate varchar2(10), nullChk varchar2(8),
	p17 varchar2(8), P18 varchar2(8), P19 varchar2(8),P20 varchar2(8),
	P21 varchar2(8), P22 varchar2(8));

----------------DB에 내일 날짜 생성---------------------------------
kioskController에서 reserve.jsp 접속시 페이지로 넘어가기 전에 DB에 내일 날짜 없으면 생성(예약 사용자가 처음 접속하는 경우에만 실행)

UserSeatSelectService.java의 timeTable_Chk()메소드
 -> ReserveDAO의 reserveTable_Date_Chk 메소드 실행
 
 select COUNT(*) from test_reserve where redate=(to_char(sysdate+1, 'yyyy/MM/dd')); ==> 내일 날짜가 있는 지 확인 후 있다면(result = 1) 여기서 끝
 
 ==> 없다면(result = 0) 생성.
 BEGIN
  FOR i IN 21..40 LOOP
       insert into TEST_RESERVE VALUES(i, to_char(sysdate+1, 'yyyy/MM/dd'), null, null, null, null, null, null, null);
      END LOOP;
 END;	
 
	 ========================스터디룸 추가 (studyRoomTable_Date_Chk 메소드)====================
	  select COUNT(*) from test_studyroom where redate=(to_char(sysdate+1, 'yyyy/MM/dd')); ==> 내일 날짜가 있는 지 확인 후 있다면(result = 1) 여기서 끝
	  
	  BEGIN
	  FOR i IN 41..43 LOOP
	       insert into test_studyroom VALUES(i, to_char(sysdate+1, 'yyyy/MM/dd'), null, null, null, null, null, null, null);
	      END LOOP;
	  END;	

---------------showSeatTable 연결---------------------------------
reserve.jsp에 import될 showSeatTable.jsp
kioskController에서  UserSeatSelectService.java의  seatRState()와 roomPState()가 이 기능을 한다
ShowSeatTableDAO()의  reserveTable_Update()를 통해 TEST_RESERVE의 nullChk 속성값을 update한다.

	String sql_notNull = "update TEST_RESERVE set NULLCHK=p"+conTime+" where p"+conTime+" is not null";
	String sql_Null = "update TEST_RESERVE set NULLCHK=p"+conTime+" where p"+conTime+" is null";

	conTime은 사용자가 예약 페이지에 접속한 시간. ex)17시 접속 -> p17의 값에 따라 nullChk의 값이 update.
	=> 만일 p17에 사용자가 있다면 그 값이 nullChk에 들어가고, 사용자가 없다면 null 이므로 nullChk도 null값을 가진다.
	showSeatTabel에서 예약과 스터디룸의 좌석 테이블은 좌석 번호들의 사용자 유무 체크를 nullChk의 값으로 하게 된다.
		==> nullChk가 null이면 사용자가 없는 것이므로 '사용 가능' / 값이 들어가 있다면 '사용중' 이라고 표시하게 작성
	
		========스터디룸 추가(studyRoomTable_Update 메소드)===============
		String sql_notNull = "update test_studyRoom set NULLCHK=p"+conTime+" where p"+conTime+" is not null";
		String sql_Null = "update test_studyRoom set NULLCHK=p"+conTime+" where p"+conTime+" is null";
	
	
그 후 ShowSeatTableDAO()의 seatRState()와 roomPState()가 각각 실행.

	Date date = new Date();
	SimpleDateFormat sdfTime = new SimpleDateFormat("HH");	
	String sql = "select seatNum, nullChk, p"+sdfTime.format(date)+" from test_reserve where redate=(to_char(sysdate, 'yyyy/mm/dd')) order by seatNum asc";
	
	예약이냐 스터디룸이냐에 따라 where절의 seatNum 범위가 달라지는 것을 제외하면 sql문은 거의 동일하다.
	접속한 시간으로 sdfTime.format(date)을 구해서 DB의 p로 시작하는 속성을 가져온다. -> ex) 17시 접속 -> p17 속성값 
	DB에는 오늘, 내일 날짜가 모두 들어가 있으므로 reDate값을 오늘 날짜로 지정.
	
		========roomPState() 변경. (연결되는 테이블이 test_reserve -> test_studyroom으로 변경)===============
		String sql = "select seatNum, nullChk, p"+sdfTime.format(date)+" from test_studyRoom where redate=(to_char(sysdate, 'yyyy/mm/dd')) order by seatNum asc";
		
---------------reserve_Payment의 form값을 DB로 연결---------------------------------
studyDTO를 이용해 form값들을 들고와서 
PaymentController의 reservePaymentChk 로 매핑.
 ->ReserveInfoUpdate()로 넘어가서 dto에 저장된 사용자가 선택한 좌석 번호에 따라
 ->예약좌석이면 reserveInfoUpdate(dto)이, 스터디룸이면 reserveInfoUpdate(dto)가 각각 실행된다.
 
  *위의 두 메소드 안에서 dto로 받아온 endTime이 23 일 경우 DB에는 p23이라는 속서이 없어 오류가 난다.
 	조건문으로 endTime이 23일 경우 sql문이 다르게 들어가도록 조치함.

---------------결제 목록에 예약과 스터디룸이 insert되게 추가하기

---------------사용자 결제 정보를 관리자가 볼 수 있게 study_timeSet 과 연결하기
